"use strict";
// Copyright IBM Corp. 2017,2018. All Rights Reserved.
// Node module: @loopback/http-server
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const https = require("https");
const pEvent = require("p-event");
/**
 * HTTP / HTTPS server used by LoopBack's RestServer
 *
 * @export
 * @class HttpServer
 */
class HttpServer {
    /**
     * @param requestListener
     * @param serverOptions
     */
    constructor(requestListener, serverOptions) {
        this._listening = false;
        this.requestListener = requestListener;
        this.serverOptions = serverOptions;
        this._port = serverOptions ? serverOptions.port || 0 : 0;
        this._host = serverOptions ? serverOptions.host : undefined;
        this._protocol = serverOptions ? serverOptions.protocol || 'http' : 'http';
        if (this._protocol === 'https') {
            this.server = https.createServer(this.serverOptions, this.requestListener);
        }
        else {
            this.server = http.createServer(this.requestListener);
        }
    }
    /**
     * Starts the HTTP / HTTPS server
     */
    async start() {
        this.server.listen(this._port, this._host);
        await pEvent(this.server, 'listening');
        this._listening = true;
        this._address = this.server.address();
    }
    /**
     * Stops the HTTP / HTTPS server
     */
    async stop() {
        if (!this.server)
            return;
        this.server.close();
        await pEvent(this.server, 'close');
        this._listening = false;
    }
    /**
     * Protocol of the HTTP / HTTPS server
     */
    get protocol() {
        return this._protocol;
    }
    /**
     * Port number of the HTTP / HTTPS server
     */
    get port() {
        return (this._address && this._address.port) || this._port;
    }
    /**
     * Host of the HTTP / HTTPS server
     */
    get host() {
        return (this._address && this._address.address) || this._host;
    }
    /**
     * URL of the HTTP / HTTPS server
     */
    get url() {
        let host = this.host;
        if (this._address.family === 'IPv6') {
            if (host === '::')
                host = '::1';
            host = `[${host}]`;
        }
        else if (host === '0.0.0.0') {
            host = '127.0.0.1';
        }
        return `${this._protocol}://${host}:${this.port}`;
    }
    /**
     * State of the HTTP / HTTPS server
     */
    get listening() {
        return this._listening;
    }
    /**
     * Address of the HTTP / HTTPS server
     */
    get address() {
        return this._listening ? this._address : undefined;
    }
}
exports.HttpServer = HttpServer;
//# sourceMappingURL=http-server.js.map