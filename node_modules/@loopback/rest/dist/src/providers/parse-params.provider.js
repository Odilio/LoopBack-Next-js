"use strict";
// Copyright IBM Corp. 2017. All Rights Reserved.
// Node module: @loopback/rest
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("@loopback/context");
const parser_1 = require("../parser");
const keys_1 = require("../keys");
const body_parsers_1 = require("../body-parsers");
/**
 * Provides the function for parsing args in requests at runtime.
 *
 * @export
 * @class ParseParamsProvider
 * @implements {Provider<ParseParams>}
 * @returns {ParseParams} The handler function that will parse request args.
 */
let ParseParamsProvider = class ParseParamsProvider {
    constructor(requestBodyParser) {
        this.requestBodyParser = requestBodyParser;
    }
    value() {
        return (request, route) => parser_1.parseOperationArgs(request, route, this.requestBodyParser);
    }
};
ParseParamsProvider = __decorate([
    __param(0, context_1.inject(keys_1.RestBindings.REQUEST_BODY_PARSER)),
    __metadata("design:paramtypes", [body_parsers_1.RequestBodyParser])
], ParseParamsProvider);
exports.ParseParamsProvider = ParseParamsProvider;
//# sourceMappingURL=parse-params.provider.js.map