"use strict";
// Copyright IBM Corp. 2017,2018. All Rights Reserved.
// Node module: @loopback/core
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("@loopback/context");
const component_1 = require("./component");
const keys_1 = require("./keys");
/**
 * Application is the container for various types of artifacts, such as
 * components, servers, controllers, repositories, datasources, connectors,
 * and models.
 */
class Application extends context_1.Context {
    constructor(options = {}) {
        super();
        this.options = options;
        // Bind to self to allow injection of application context in other modules.
        this.bind(keys_1.CoreBindings.APPLICATION_INSTANCE).to(this);
        // Make options available to other modules as well.
        this.bind(keys_1.CoreBindings.APPLICATION_CONFIG).to(options);
    }
    /**
     * Register a controller class with this application.
     *
     * @param controllerCtor {Function} The controller class
     * (constructor function).
     * @param {string=} name Optional controller name, default to the class name
     * @return {Binding} The newly created binding, you can use the reference to
     * further modify the binding, e.g. lock the value to prevent further
     * modifications.
     *
     * ```ts
     * class MyController {
     * }
     * app.controller(MyController).lock();
     * ```
     */
    controller(controllerCtor, name) {
        const binding = context_1.createBindingFromClass(controllerCtor, {
            name,
            namespace: 'controllers',
            type: 'controller',
        });
        this.add(binding);
        return binding;
    }
    /**
     * Bind a Server constructor to the Application's master context.
     * Each server constructor added in this way must provide a unique prefix
     * to prevent binding overlap.
     *
     * ```ts
     * app.server(RestServer);
     * // This server constructor will be bound under "servers.RestServer".
     * app.server(RestServer, "v1API");
     * // This server instance will be bound under "servers.v1API".
     * ```
     *
     * @param {Constructor<Server>} server The server constructor.
     * @param {string=} name Optional override for key name.
     * @returns {Binding} Binding for the server class
     * @memberof Application
     */
    server(ctor, name) {
        const binding = context_1.createBindingFromClass(ctor, {
            name,
            namespace: keys_1.CoreBindings.SERVERS,
            type: 'server',
        }).inScope(context_1.BindingScope.SINGLETON);
        this.add(binding);
        return binding;
    }
    /**
     * Bind an array of Server constructors to the Application's master
     * context.
     * Each server added in this way will automatically be named based on the
     * class constructor name with the "servers." prefix.
     *
     * If you wish to control the binding keys for particular server instances,
     * use the app.server function instead.
     * ```ts
     * app.servers([
     *  RestServer,
     *  GRPCServer,
     * ]);
     * // Creates a binding for "servers.RestServer" and a binding for
     * // "servers.GRPCServer";
     * ```
     *
     * @param {Constructor<Server>[]} ctors An array of Server constructors.
     * @returns {Binding[]} An array of bindings for the registered server classes
     * @memberof Application
     */
    servers(ctors) {
        return ctors.map(ctor => this.server(ctor));
    }
    /**
     * Retrieve the singleton instance for a bound constructor.
     *
     * @template T
     * @param {Constructor<T>=} ctor The constructor that was used to make the
     * binding.
     * @returns {Promise<T>}
     * @memberof Application
     */
    async getServer(target) {
        let key;
        // instanceof check not reliable for string.
        if (typeof target === 'string') {
            key = `${keys_1.CoreBindings.SERVERS}.${target}`;
        }
        else {
            const ctor = target;
            key = `${keys_1.CoreBindings.SERVERS}.${ctor.name}`;
        }
        return await this.get(key);
    }
    /**
     * Start the application, and all of its registered servers.
     *
     * @returns {Promise}
     * @memberof Application
     */
    async start() {
        await this._forEachServer(s => s.start());
    }
    /**
     * Stop the application instance and all of its registered servers.
     * @returns {Promise}
     * @memberof Application
     */
    async stop() {
        await this._forEachServer(s => s.stop());
    }
    /**
     * Helper function for iterating across all registered server components.
     * @protected
     * @template T
     * @param {(s: Server) => Promise<T>} fn The function to run against all
     * registered servers
     * @memberof Application
     */
    async _forEachServer(fn) {
        const bindings = this.find(`${keys_1.CoreBindings.SERVERS}.*`);
        await Promise.all(bindings.map(async (binding) => {
            const server = await this.get(binding.key);
            return await fn(server);
        }));
    }
    /**
     * Add a component to this application and register extensions such as
     * controllers, providers, and servers from the component.
     *
     * @param componentCtor The component class to add.
     * @param {string=} name Optional component name, default to the class name
     *
     * ```ts
     *
     * export class ProductComponent {
     *   controllers = [ProductController];
     *   repositories = [ProductRepo, UserRepo];
     *   providers = {
     *     [AUTHENTICATION_STRATEGY]: AuthStrategy,
     *     [AUTHORIZATION_ROLE]: Role,
     *   };
     * };
     *
     * app.component(ProductComponent);
     * ```
     */
    component(componentCtor, name) {
        const binding = context_1.createBindingFromClass(componentCtor, {
            name,
            namespace: 'components',
            type: 'component',
        }).inScope(context_1.BindingScope.SINGLETON);
        this.add(binding);
        // Assuming components can be synchronously instantiated
        const instance = this.getSync(binding.key);
        component_1.mountComponent(this, instance);
        return binding;
    }
    /**
     * Set application metadata. `@loopback/boot` calls this method to populate
     * the metadata from `package.json`.
     *
     * @param metadata Application metadata
     */
    setMetadata(metadata) {
        this.bind(keys_1.CoreBindings.APPLICATION_METADATA).to(metadata);
    }
}
exports.Application = Application;
//# sourceMappingURL=application.js.map