import { PropertyDefinition } from '@loopback/repository';
import { JSONSchema6 as JSONSchema } from 'json-schema';
/**
 * Gets the JSON Schema of a TypeScript model/class by seeing if one exists
 * in a cache. If not, one is generated and then cached.
 * @param ctor Contructor of class to get JSON Schema from
 */
export declare function getJsonSchema(ctor: Function): JSONSchema;
/**
 * Gets the wrapper function of primitives string, number, and boolean
 * @param type Name of type
 */
export declare function stringTypeToWrapper(type: string | Function): Function;
/**
 * Determines whether a given string or constructor is array type or not
 * @param type Type as string or wrapper
 */
export declare function isArrayType(type: string | Function): boolean;
/**
 * Converts property metadata into a JSON property definition
 * @param meta
 */
export declare function metaToJsonProperty(meta: PropertyDefinition): JSONSchema;
/**
 * Converts a TypeScript class into a JSON Schema using TypeScript's
 * reflection API
 * @param ctor Constructor of class to convert from
 */
export declare function modelToJsonSchema(ctor: Function): JSONSchema;
